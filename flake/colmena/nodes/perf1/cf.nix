{inputs, ...}: let
  amis = import "${inputs.nixpkgs}/nixos/modules/virtualisation/ec2-amis.nix";

  toBase64 = text: let
    inherit (inputs.nixpkgs.lib) sublist mod stringToCharacters concatMapStrings;
    inherit (inputs.nixpkgs.lib.strings) charToInt;
    inherit (builtins) substring foldl' genList elemAt length concatStringsSep stringLength;

    lookup = stringToCharacters "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    sliceN = size: list: n: sublist (n * size) size list;
    pows = [(64 * 64 * 64) (64 * 64) 64 1];
    intSextets = i: map (j: mod (i / j) 64) pows;
    compose = f: g: x: f (g x);
    intToChar = elemAt lookup;
    convertTripletInt = sliceInt: concatMapStrings intToChar (intSextets sliceInt);
    sliceToInt = foldl' (acc: val: acc * 256 + val) 0;
    convertTriplet = compose convertTripletInt sliceToInt;
    join = concatStringsSep "";

    convertLastSlice = slice: let
      len = length slice;
    in
      if len == 1
      then (substring 0 2 (convertTripletInt ((sliceToInt slice) * 256 * 256))) + "=="
      else if len == 2
      then (substring 0 3 (convertTripletInt ((sliceToInt slice) * 256))) + "="
      else "";

    len = stringLength text;
    nFullSlices = len / 3;
    bytes = map charToInt (stringToCharacters text);
    tripletAt = sliceN 3 bytes;
    head = genList (compose convertTriplet tripletAt) nFullSlices;
    tail = convertLastSlice (tripletAt nFullSlices);
  in
    join (head ++ [tail]);
in {
  AWSTemplateFormatVersion = "2010-09-09";
  Description = "Template generated by nix";

  Outputs = {
    perf1AvailabilityZone.Value."Fn::GetAtt" = ["perf1" "AvailabilityZone"];
    perf1PrivateDnsName.Value."Fn::GetAtt" = ["perf1" "PrivateDnsName"];
    perf1PrivateIp.Value."Fn::GetAtt" = ["perf1" "PrivateIp"];
    perf1PublicDnsName.Value."Fn::GetAtt" = ["perf1" "PublicDnsName"];
    perf1PublicIp.Value."Fn::GetAtt" = ["perf1" "PublicIp"];
    perf1InstanceId.Value.Ref = "perf1";
    sgGroupId.Value."Fn::GetAtt" = ["sg" "GroupId"];
    sgVpcId.Value."Fn::GetAtt" = ["sg" "VpcId"];
    eipAllocationId.Value."Fn::GetAtt" = ["eip" "AllocationId"];
    eipPublicIp.Value."Fn::GetAtt" = ["eip" "PublicIp"];
  };

  Resources = {
    sg = {
      Type = "AWS::EC2::SecurityGroup";
      Properties = {
        GroupDescription = "clients";
        SecurityGroupIngress = [
          {
            Description = "allow SSH";
            IpProtocol = "tcp";
            CidrIp = "0.0.0.0/0";
            FromPort = 22;
            ToPort = 22;
          }
        ];
      };
    };

    key = {
      Type = "AWS::EC2::KeyPair";
      Properties.KeyName = "bootstrap";
    };

    eip = {
      Type = "AWS::EC2::EIP";
      Properties.InstanceId.Ref = "perf1";
    };

    eipAssoc = {
      Type = "AWS::EC2::EIPAssociation";
      Properties = {
        EIP.Ref = "eip";
        InstanceId.Ref = "perf1";
      };
    };

    perf1 = {
      Type = "AWS::EC2::Instance";
      Properties = {
        ImageId = amis."23.05".eu-central-1.hvm-ebs;
        InstanceType = "t3a.medium";
        SecurityGroupIds = [{"Fn::GetAtt" = ["sg" "GroupId"];}];
        KeyName.Ref = "key";
        Tags = [
          {
            Key = "Name";
            Value = "perf1";
          }
        ];

        BlockDeviceMappings = [
          {
            DeviceName = "/dev/xvda";
            Ebs = {
              DeleteOnTermination = true;
              Iops = 3000;
              VolumeSize = "100";
              VolumeType = "gp3";
            };
          }
        ];

        # UserData = toBase64 ''
        #   #!/bin/sh

        #   set -exuo pipefail

        #   exec >/dev/console 2>&1

        #   mkdir -p /etc/nixos
        #   cat << 'EOF' > /etc/nixos/flake.nix
        #   {
        #     inputs = {
        #       nixpkgs.url = "github:nixos/nixpkgs/nixos-23.05";
        #       auth-keys-hub.url = "github:input-output-hk/auth-keys-hub";
        #     };

        #     outputs = {nixpkgs, auth-keys-hub, ...}: {
        #       nixosConfigurations.base = nixpkgs.lib.nixosSystem {
        #         system = "x86_64-linux";
        #         modules = [
        #           ({ pkgs, config, ...}: {
        #             imports = [
        #               "''${nixpkgs}/nixos/modules/virtualisation/amazon-image.nix"
        #               auth-keys-hub.nixosModules.auth-keys-hub
        #             ];

        #             system.stateVersion = "23.05";
        #             networking.hostName = "perf1";

        #             nix = {
        #               registry.nixpkgs.flake = inputs.nixpkgs;
        #               show-trace = true;
        #               keep-outputs = true;
        #               tarball-ttl = 60 * 60 * 24 * 30;
        #               builders-use-substitutes = true;

        #               # Invoke GC when we are below 5 GiB of remaining disk space
        #               min-free = 1024 * 1024 * 1024 * 5;

        #               # Don't free more than 10 GiB at once.
        #               max-free = 1024 * 1024 * 1024 * 10;

        #               settings = {
        #                 substituters = [ "https://cache.iog.io" ];
        #                 trusted-public-keys = [ "hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=" ];
        #               };

        #               extraOptions = '''
        #                 show-trace = true
        #                 experimental-features = nix-command flakes
        #               ''';
        #             };

        #             services.openssh = {
        #               enable = true;
        #               settings.PasswordAuthentication = false;
        #             };

        #             networking.firewall.enable = false;

        #             programs.auth-keys-hub = {
        #               enable = true;
        #               package = auth-keys-hub.packages.x86_64-linux.auth-keys-hub;
        #               github.users = ["manveru"];
        #             };

        #             environment.etc.ready.text = "true";
        #           })
        #         ];
        #       };
        #     };
        #   }
        #   EOF

        #   cat /etc/nixos/flake.nix
        #   nixos-rebuild switch \
        #     --flake /etc/nixos#base \
        #     --option substituters "https://cache.nixos.org https://cache.iog.io" \
        #     --option trusted-public-keys "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ="

        #   echo done
        # '';
      };
    };
  };
}
