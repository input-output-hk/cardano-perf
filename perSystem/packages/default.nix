{
  imports = [
    ./zfs-kexec-image
    ./ssh-config
  ];

  perSystem = {
    inputs',
    pkgs,
    lib,
    ...
  }: {
    packages = {
      bootstrap = pkgs.callPackage ./bootstrap {};
      inherit (inputs'.nixpkgs-unstable.legacyPackages) rain;

      formation = pkgs.writeText "formation.json" (
        let
          amis = import "${inputs'.nixpkgs.legacyPackages.path}/nixos/modules/virtualisation/ec2-amis.nix";
        in
          builtins.toJSON {
            AWSTemplateFormatVersion = "2010-09-09";
            Description = "Template generated by nix";

            Outputs = {
              c1AvailabilityZone.Value."Fn::GetAtt" = ["c1" "AvailabilityZone"];
              c1PrivateDnsName.Value."Fn::GetAtt" = ["c1" "PrivateDnsName"];
              c1PrivateIp.Value."Fn::GetAtt" = ["c1" "PrivateIp"];
              c1PublicDnsName.Value."Fn::GetAtt" = ["c1" "PublicDnsName"];
              c1PublicIp.Value."Fn::GetAtt" = ["c1" "PublicIp"];
              c1InstanceId.Value.Ref = "c1";
              sgGroupId.Value."Fn::GetAtt" = ["sg" "GroupId"];
              sgVpcId.Value."Fn::GetAtt" = ["sg" "VpcId"];
            };

            Resources = {
              sg = {
                Type = "AWS::EC2::SecurityGroup";
                Properties = {
                  GroupDescription = "clients";
                  SecurityGroupIngress = [
                    {
                      Description = "allow SSH";
                      IpProtocol = "tcp";
                      CidrIp = "0.0.0.0/0";
                      FromPort = 22;
                      ToPort = 22;
                    }
                  ];
                };
              };

              key = {
                Type = "AWS::EC2::KeyPair";
                Properties.KeyName = "bootstrap";
              };

              c1 = {
                Type = "AWS::EC2::Instance";
                Properties = {
                  ImageId = amis."23.05".eu-central-1.hvm-ebs;
                  InstanceType = "t3a.medium";
                  SecurityGroupIds = [{"Fn::GetAtt" = ["sg" "GroupId"];}];
                  KeyName.Ref = "key";
                  Tags = [
                    {
                      Key = "Name";
                      Value = "c1";
                    }
                  ];

                  BlockDeviceMappings = [
                    {
                      DeviceName = "/dev/xvda";
                      Ebs = {
                        DeleteOnTermination = true;
                        Iops = 3000;
                        VolumeSize = "100";
                        VolumeType = "gp3";
                      };
                    }
                  ];

                  UserData = builtins.readFile (pkgs.runCommand "user_data" {
                      data = ''
                        #!/bin/sh

                        set -exuo pipefail

                        exec >/dev/console 2>&1

                        mkdir -p /etc/nixos
                        cat << 'EOF' > /etc/nixos/flake.nix
                        {
                          inputs = {
                            nixpkgs.url = "github:nixos/nixpkgs/nixos-23.05";
                            auth-keys-hub.url = "github:input-output-hk/auth-keys-hub";
                          };

                          outputs = {nixpkgs, auth-keys-hub, ...}: {
                            nixosConfigurations.base = nixpkgs.lib.nixosSystem {
                              system = "x86_64-linux";
                              modules = [
                                ({ pkgs, config, ...}: {
                                  imports = [
                                    "''${nixpkgs}/nixos/modules/virtualisation/amazon-image.nix"
                                    auth-keys-hub.nixosModules.auth-keys-hub
                                  ];

                                  system.stateVersion = "23.05";
                                  networking.hostName = "c1";

                                  nix = {
                                    settings = {
                                      substituters = [ "https://cache.iog.io" ];
                                      trusted-public-keys = [ "hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=" ];
                                    };

                                    extraOptions = '''
                                      show-trace = true
                                      experimental-features = nix-command flakes
                                    ''';
                                  };

                                  services.openssh = {
                                    enable = true;
                                    settings.PasswordAuthentication = false;
                                  };

                                  networking.firewall.enable = false;

                                  programs.auth-keys-hub = {
                                    enable = true;
                                    package = auth-keys-hub.packages.x86_64-linux.auth-keys-hub;
                                    github.users = ["manveru"];
                                  };

                                  environment.etc.ready.text = "true";
                                })
                              ];
                            };
                          };
                        }
                        EOF

                        cat /etc/nixos/flake.nix
                        nixos-rebuild switch \
                          --flake /etc/nixos#base \
                          --option substituters "https://cache.nixos.org https://cache.iog.io" \
                          --option trusted-public-keys "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ="

                        echo done
                      '';
                    } ''
                      echo "$data" | base64 > $out
                    '');
                };
              };
            };
          }
      );
    };
  };
}
