From 5a8b89ac6fd9147e86d7713536324cbd0458247b Mon Sep 17 00:00:00 2001
From: Michael Fellinger <michael.fellinger@iohk.io>
Date: Fri, 26 Jan 2024 15:45:37 +0100
Subject: [PATCH] nix-driver

---
 client/allocrunner/taskrunner/nix_hook.go     | 349 ++++++++++++++++++
 .../taskrunner/task_runner_hooks.go           |   2 +
 .../allocrunner/taskrunner/template_hook.go   |  88 +++++
 drivers/exec/driver.go                        |  19 +-
 4 files changed, 452 insertions(+), 6 deletions(-)
 create mode 100644 client/allocrunner/taskrunner/nix_hook.go

diff --git a/client/allocrunner/taskrunner/nix_hook.go b/client/allocrunner/taskrunner/nix_hook.go
new file mode 100644
index 0000000000..65f1194030
--- /dev/null
+++ b/client/allocrunner/taskrunner/nix_hook.go
@@ -0,0 +1,349 @@
+package taskrunner
+
+import (
+	"context"
+	"fmt"
+	"io"
+	"os"
+	"os/exec"
+	"os/user"
+	"path/filepath"
+	"strconv"
+	"strings"
+
+	hclog "github.com/hashicorp/go-hclog"
+	log "github.com/hashicorp/go-hclog"
+	"github.com/hashicorp/nomad/client/allocrunner/interfaces"
+	"github.com/hashicorp/nomad/helper/users"
+	"github.com/hashicorp/nomad/nomad/structs"
+	"github.com/hashicorp/nomad/plugins/drivers"
+)
+
+const (
+	// HookNameNix is the name of the Nix hook
+	HookNameNix = "nix"
+)
+
+// nixHook is used to prepare a task directory structure based on Nix packages
+type nixHook struct {
+	alloc  *structs.Allocation
+	runner *TaskRunner
+	logger log.Logger
+}
+
+func newNixHook(runner *TaskRunner, logger log.Logger) *nixHook {
+	h := &nixHook{
+		alloc:  runner.Alloc(),
+		runner: runner,
+	}
+	h.logger = logger.Named(h.Name())
+	return h
+}
+
+func (*nixHook) Name() string {
+	return HookNameNix
+}
+
+func (h *nixHook) emitEvent(event string, message string) {
+	h.runner.EmitEvent(structs.NewTaskEvent(event).SetDisplayMessage(message))
+}
+
+func (h *nixHook) emitEventError(event string, err error) {
+	h.runner.EmitEvent(structs.NewTaskEvent(event).SetFailsTask().SetSetupError(err))
+}
+
+func (h *nixHook) Prestart(ctx context.Context, req *interfaces.TaskPrestartRequest, resp *interfaces.TaskPrestartResponse) error {
+	defer func() {
+		resp.Done = true
+	}()
+
+	getStrArr := func(key string) ([]string, error) {
+		v, set := req.Task.Config[key]
+		if !set {
+			return nil, nil
+		}
+
+		vs, ok := v.([]interface{})
+		if !ok {
+			return nil, fmt.Errorf("%s is not a list: %v", key, v)
+		}
+
+		var arr []string
+		for i, vv := range vs {
+			if vvs, ok := vv.(string); !ok {
+				return nil, fmt.Errorf("%s[%d] is not a string: %v", key, i, vv)
+			} else {
+				arr = append(arr, vvs)
+			}
+		}
+		return arr, nil
+	}
+
+	installables, err := getStrArr("nix_installables")
+	if err != nil {
+		return err
+	}
+
+	if len(installables) == 0 {
+		return nil
+	}
+
+	profileInstallArgs, err := getStrArr("nix_profile_install_args")
+	if err != nil {
+		return err
+	}
+
+	mount := false
+	if v, set := req.Task.Config["nix_host"]; set {
+		if vv, ok := v.(bool); !ok {
+			return fmt.Errorf("nix_host is not a bool: %v", v)
+		} else if vv {
+			mount = true
+
+			resp.Mounts = append(resp.Mounts, &drivers.MountConfig{
+				TaskPath:        "/nix",
+				HostPath:        "/nix",
+				Readonly:        false,
+				PropagationMode: "host-to-task",
+			})
+		}
+	}
+
+	var uid int
+	var gid int
+	{ // Default uid and gid of /nix to the task user or nobody.
+		var user *user.User
+		{
+			var err error
+			if req.Task.User != "" {
+				if user, err = users.Lookup(req.Task.User); err != nil {
+					return fmt.Errorf("Couldn't look up user %q: %v", req.Task.User, err)
+				}
+			} else if user, err = users.Lookup("nobody"); err != nil {
+				return fmt.Errorf("Couldn't look up nobody user: %v", err)
+			}
+		}
+
+		if u, err := strconv.Atoi(user.Uid); err != nil {
+			return fmt.Errorf("Couldn't convert uid %q to int: %v", user.Uid, err)
+		} else if g, err := strconv.Atoi(user.Gid); err != nil {
+			return fmt.Errorf("Couldn't convert gid %q to int: %v", user.Gid, err)
+		} else {
+			uid = u
+			gid = g
+		}
+	}
+
+	if err := h.install(installables, profileInstallArgs, req.TaskDir.Dir, mount, uid, gid); err != nil {
+		return err
+	}
+
+	if !mount {
+		// Create NIX_STATE_DIR so that nix recognizes /nix.
+		// https://github.com/NixOS/nix/blob/673fe85976b00a6324697b2db4a5d12a7ef57829/src/libstore/store-api.cc#L1391
+		if err := os.MkdirAll(req.TaskDir.Dir+"/nix/var/nix", 0755); err != nil {
+			return err
+		}
+
+		// Chown nix directories.
+		for _, p := range []string{
+			"/nix/var/nix",
+			"/nix/var",
+			"/nix",
+			"/nix/store",
+		} {
+			if err := os.Chown(req.TaskDir.Dir+p, uid, gid); err != nil {
+				return err
+			}
+		}
+	}
+
+	return nil
+}
+
+// install takes an installable like:
+// github:NixOS/nixpkgs#cowsay
+// github:NixOS/nixpkgs?ref=nixpkgs-unstable#cowsay
+// github:NixOS/nixpkgs?rev=04b19784342ac2d32f401b52c38a43a1352cd916#cowsay
+// /nix/store/<hash>-<name>
+//
+// the given installable
+func (h *nixHook) install(installables []string, profileInstallArgs []string, taskDir string, mounted bool, uid, gid int) error {
+	linkPath := filepath.Join(taskDir, "current-alloc")
+	_, err := os.Stat(linkPath)
+	if err == nil {
+		return nil
+	}
+
+	h.logger.Debug("Building", "installable", installables)
+	h.emitEvent("Nix", "building: "+strings.Join(installables, " "))
+
+	for _, installable := range installables {
+		if err = h.profileInstall(linkPath, installable, profileInstallArgs); err != nil {
+			return err
+		}
+	}
+
+	if !mounted {
+		requisites, err := h.requisites(linkPath)
+		if err != nil {
+			return err
+		}
+
+		// Now copy each dependency into the allocation /nix/store directory
+		for _, requisit := range requisites {
+			h.logger.Debug("copying", "requisit", requisit)
+
+			err = filepath.Walk(requisit, installAll(h.logger, taskDir, false, false, uid, gid))
+			if err != nil {
+				return err
+			}
+		}
+	}
+
+	link, err := filepath.EvalSymlinks(linkPath)
+	if err != nil {
+		return err
+	}
+
+	h.logger.Debug("linking main drv paths", "linkPath", linkPath, "link", link)
+
+	return filepath.Walk(link, installAll(h.logger, taskDir, true, mounted, uid, gid))
+}
+
+func (h *nixHook) profileInstall(linkPath string, installable string, extraArgs []string) error {
+	h.logger.Debug("Building", "installable", installable)
+	h.emitEvent("Nix", "building: "+installable)
+
+	args := []string{"profile", "install", "-L", "--no-write-lock-file", "--profile", linkPath}
+	args = append(append(args, extraArgs...), installable)
+	cmd := exec.Command("nix", args...)
+	output, err := cmd.CombinedOutput()
+
+	h.logger.Debug(cmd.String(), "output", string(output))
+
+	if err != nil {
+		h.logger.Error(cmd.String(), "output", string(output), "error", err)
+		h.emitEvent("Nix", "build failed with error: "+err.Error()+" output: "+string(output))
+	}
+
+	return err
+}
+
+// Collect all store paths required to run it
+func (h *nixHook) requisites(outPath string) ([]string, error) {
+	cmd := exec.Command("nix-store", "--query", "--requisites", outPath)
+	nixStoreOutput, err := cmd.Output()
+
+	if err != nil {
+		if ee, ok := err.(*exec.ExitError); ok {
+			h.logger.Error(cmd.String(), "error", err, "stderr", string(ee.Stderr))
+		} else {
+			h.logger.Error(cmd.String(), "error", err, "stdout", string(nixStoreOutput))
+		}
+		return []string{}, err
+	}
+
+	return strings.Fields(string(nixStoreOutput)), nil
+}
+
+func installAll(logger hclog.Logger, targetDir string, truncate, link bool, uid, gid int) filepath.WalkFunc {
+	return func(path string, info os.FileInfo, err error) error {
+		if err != nil {
+			return err
+		}
+
+		var dst string
+		if truncate {
+			parts := splitPath(path)
+			dst = filepath.Join(append([]string{targetDir}, parts[3:]...)...)
+		} else {
+			dst = filepath.Join(targetDir, path)
+		}
+
+		// Skip the file if it already exists at the dst
+		stat, err := os.Stat(dst)
+		lstat, _ := os.Lstat(dst)
+		if err == nil {
+			return nil
+		}
+		if !os.IsNotExist(err) {
+			logger.Debug("stat errors", "err", err, "stat",
+				fmt.Sprintf("%#v", stat),
+			)
+			return err
+		}
+
+		if info.Mode()&os.ModeSymlink != 0 {
+			symlink, err := os.Readlink(path)
+			if err != nil {
+				return err
+			}
+			// logger.Debug("l", "symlink", symlink, "dst", dst)
+			if err := os.Symlink(symlink, dst); err != nil {
+				if !os.IsExist(err) {
+					logger.Debug("stat", fmt.Sprintf("%#v", stat))
+					logger.Debug("lstat", fmt.Sprintf("%#v", lstat))
+					return err
+				}
+			}
+			if info.IsDir() {
+				return filepath.SkipDir
+			} else {
+				return nil
+			}
+		}
+
+		if info.IsDir() {
+			// logger.Debug("d", "dst", dst)
+			if err := os.MkdirAll(dst, 0777); err != nil {
+				return err
+			}
+			return os.Chown(dst, uid, gid)
+		}
+
+		if link {
+			if err := os.Symlink(path, dst); err != nil {
+				return fmt.Errorf("Couldn't link %q to %q: %v", path, dst, err)
+			}
+
+			if err := os.Lchown(dst, uid, gid); err != nil {
+				return fmt.Errorf("Couldn't chown link %q to %q: %v", dst, path, err)
+			}
+		} else {
+			// logger.Debug("f", "dst", dst)
+			srcfd, err := os.Open(path)
+			if err != nil {
+				return err
+			}
+			defer srcfd.Close()
+
+			dstfd, err := os.OpenFile(dst, os.O_WRONLY|os.O_CREATE, info.Mode())
+			if err != nil {
+				return err
+			}
+			defer dstfd.Close()
+
+			if _, err = io.Copy(dstfd, srcfd); err != nil {
+				return fmt.Errorf("Couldn't copy %q to %q: %v", path, dst, err)
+			}
+
+			if err := dstfd.Chown(uid, gid); err != nil {
+				return fmt.Errorf("Couldn't chown %q: %v", dst, err)
+			}
+		}
+
+		return nil
+	}
+}
+
+// SplitPath splits a file path into its directories and filename.
+func splitPath(path string) []string {
+	dir := filepath.Dir(path)
+	base := filepath.Base(path)
+	if dir == "/" {
+		return []string{base}
+	} else {
+		return append(splitPath(dir), base)
+	}
+}
diff --git a/client/allocrunner/taskrunner/task_runner_hooks.go b/client/allocrunner/taskrunner/task_runner_hooks.go
index 5282f66978..7f6ce1bc62 100644
--- a/client/allocrunner/taskrunner/task_runner_hooks.go
+++ b/client/allocrunner/taskrunner/task_runner_hooks.go
@@ -88,6 +88,8 @@ func (tr *TaskRunner) initHooks() {
 			}))
 	}
 
+	tr.runnerHooks = append(tr.runnerHooks, newNixHook(tr, hookLogger))
+
 	// If Vault is enabled, add the hook
 	if task.Vault != nil && tr.vaultClientFunc != nil {
 		tr.runnerHooks = append(tr.runnerHooks, newVaultHook(&vaultHookConfig{
diff --git a/client/allocrunner/taskrunner/template_hook.go b/client/allocrunner/taskrunner/template_hook.go
index 3cd8c412de..11b0f9a1e7 100644
--- a/client/allocrunner/taskrunner/template_hook.go
+++ b/client/allocrunner/taskrunner/template_hook.go
@@ -6,7 +6,14 @@ package taskrunner
 import (
 	"context"
 	"fmt"
+	"io/fs"
+	"os"
+	"os/user"
+	"path/filepath"
+	"strconv"
+	"strings"
 	"sync"
+	"syscall"
 
 	log "github.com/hashicorp/go-hclog"
 	"github.com/hashicorp/nomad/client/allocrunner/interfaces"
@@ -15,6 +22,7 @@ import (
 	"github.com/hashicorp/nomad/client/config"
 	cstructs "github.com/hashicorp/nomad/client/structs"
 	"github.com/hashicorp/nomad/client/taskenv"
+	"github.com/hashicorp/nomad/helper/users"
 	"github.com/hashicorp/nomad/nomad/structs"
 )
 
@@ -173,6 +181,40 @@ func (h *templateHook) Prestart(ctx context.Context, req *interfaces.TaskPrestar
 		h.vaultNamespace = req.Task.Vault.Namespace
 	}
 
+	var uid int
+	var gid int
+	{ // Default uid and gid of templates to the task user or nobody.
+		var user *user.User
+		{
+			var err error
+			if req.Task.User != "" {
+				if user, err = users.Lookup(req.Task.User); err != nil {
+					return fmt.Errorf("Couldn't look up user %q: %v", req.Task.User, err)
+				}
+			} else if user, err = users.Lookup("nobody"); err != nil {
+				return fmt.Errorf("Couldn't look up nobody user: %v", err)
+			}
+		}
+
+		if u, err := strconv.Atoi(user.Uid); err != nil {
+			return fmt.Errorf("Couldn't convert uid %q to int: %v", user.Uid, err)
+		} else if g, err := strconv.Atoi(user.Gid); err != nil {
+			return fmt.Errorf("Couldn't convert gid %q to int: %v", user.Gid, err)
+		} else {
+			uid = u
+			gid = g
+		}
+
+		for _, t := range h.config.templates {
+			if t.Uid == nil {
+				t.Uid = &uid
+			}
+			if t.Gid == nil {
+				t.Gid = &gid
+			}
+		}
+	}
+
 	unblockCh, err := h.newManager()
 	if err != nil {
 		return err
@@ -184,6 +226,52 @@ func (h *templateHook) Prestart(ctx context.Context, req *interfaces.TaskPrestar
 	case <-unblockCh:
 	}
 
+	// Set o+rw for all parent directories for each template inside the task dir
+	// and chown them to the task user or nobody (determined above).
+	for _, template := range h.config.templates {
+		destDir := strings.TrimPrefix(template.DestPath, "/")
+		for {
+			destDir, _ = filepath.Split(destDir)
+			if destDir == "" {
+				break
+			}
+
+			// strip trailing separator for the next filepath.Split()
+			destDir = destDir[:len(destDir)-1]
+
+			dir, escapes := req.TaskEnv.ClientPath(destDir, false)
+			if escapes {
+				return fmt.Errorf("Template dir escapes task dir: %s", destDir)
+			}
+
+			info, err := os.Lstat(dir)
+			if err != nil {
+				return fmt.Errorf("Failed to stat template dir: %v", err)
+			}
+			mode := info.Mode()
+
+			if mode.Type()&fs.ModeSymlink == fs.ModeSymlink {
+				continue
+			}
+
+			perm := mode.Perm()
+			req := os.FileMode(0006) // o=rw
+			if perm&req != req {
+				if err := os.Chmod(dir, perm|req); err != nil {
+					return fmt.Errorf("Failed to change template dir permissions: %v", err)
+				}
+			}
+
+			if stat, ok := info.Sys().(*syscall.Stat_t); ok {
+				if int(stat.Uid) != uid || int(stat.Gid) != gid {
+					if err = os.Lchown(dir, uid, gid); err != nil {
+						return err
+					}
+				}
+			}
+		}
+	}
+
 	return nil
 }
 
diff --git a/drivers/exec/driver.go b/drivers/exec/driver.go
index 02e4064724..6a4196e2fd 100644
--- a/drivers/exec/driver.go
+++ b/drivers/exec/driver.go
@@ -87,12 +87,15 @@ var (
 	// taskConfigSpec is the hcl specification for the driver config section of
 	// a task within a job. It is returned in the TaskConfigSchema RPC
 	taskConfigSpec = hclspec.NewObject(map[string]*hclspec.Spec{
-		"command":  hclspec.NewAttr("command", "string", true),
-		"args":     hclspec.NewAttr("args", "list(string)", false),
-		"pid_mode": hclspec.NewAttr("pid_mode", "string", false),
-		"ipc_mode": hclspec.NewAttr("ipc_mode", "string", false),
-		"cap_add":  hclspec.NewAttr("cap_add", "list(string)", false),
-		"cap_drop": hclspec.NewAttr("cap_drop", "list(string)", false),
+		"command":                  hclspec.NewAttr("command", "string", true),
+		"args":                     hclspec.NewAttr("args", "list(string)", false),
+		"pid_mode":                 hclspec.NewAttr("pid_mode", "string", false),
+		"ipc_mode":                 hclspec.NewAttr("ipc_mode", "string", false),
+		"cap_add":                  hclspec.NewAttr("cap_add", "list(string)", false),
+		"cap_drop":                 hclspec.NewAttr("cap_drop", "list(string)", false),
+		"nix_installables":         hclspec.NewAttr("nix_installables", "list(string)", false),
+		"nix_profile_install_args": hclspec.NewAttr("nix_profile_install_args", "list(string)", false),
+		"nix_host":                 hclspec.NewAttr("nix_host", "bool", false),
 	})
 
 	// driverCapabilities represents the RPC response for what features are
@@ -202,6 +205,10 @@ type TaskConfig struct {
 
 	// CapDrop is a set of linux capabilities to disable.
 	CapDrop []string `codec:"cap_drop"`
+
+	NixInstallables       []string `codec:"nix_installables"`
+	NixProfileInstallArgs []string `codec:"nix_profile_install_args"`
+	NixHost               bool     `codec:"nix_host"`
 }
 
 func (tc *TaskConfig) validate() error {
-- 
2.42.0

